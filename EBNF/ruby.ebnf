<program> ::= { <statement> }

<statement> ::= <import_statement> | <print_statement> | <variable_declaration> | <arithmetic_operation> | <string_operation>| <array_operation>| <hash_operation>| <conditional_statement>| <loop_statement>| <method_definition>| <class_definition>


<print_statement> ::= puts <expression> ;

<variable_declaration> ::= <identifier> = <expression> ;

<arithmetic_operation> ::= <identifier> = <numeric_expression> { (+ | - | * | / | %) <numeric_expression> }

<string_operation> ::= <identifier> = <expression> . (upcase | downcase) ;

<array_operation> ::= <identifier> = '[' <expression> { , <expression> } ']' ;

<hash_operation> ::= <identifier> = '{' <string_literal> => <expression> { , <string_literal> => <expression> } '}' ;

<conditional_statement> ::= if <condition> <statement> end	
                           | if <condition> <statement> else <statement> end
                           | if <condition> <statement> else <conditional_statement> 'end'

<while_loop> ::= while <condition> do <statement> end ;

<until_loop> ::= until <condition> do <statement> end ;

<for_loop_range> ::= for <identifier> in <range> do <statement> end ;

<loop_statement> ::= loop <statement> end ;

<method_definition> ::= def <identifier> '(' [<parameters>] ')' <statement> end ;


<class_definition> ::= class <identifier> <class_body> end ;

<class_body> ::= <attribute_declaration> { <method_definition> }

<attribute_declaration> ::= attr_accessor ( <identifier> { , <identifier> } )* <identifier> ;

<expression> ::= <string_literal>
             | <boolean_literal>
             | <number_literal>
             | <identifier>
             | <numeric_expression>
             | <array_operation>
             | <hash_operation>

<parameters> ::= <identifier> { ',' <identifier> }

<condition> ::= <expression> (== | != | < | > | <= | >=) <expression>
             | ! <condition>
             | '(' <condition> ')'
             | <condition> (&& | ||) <condition>

<string_literal> ::= " { <character> } "

<boolean_literal> ::= true | false

<number_literal> ::= <digit>+

<range> ::= <number_literal> .. <number_literal> ;

<numeric_expression> ::= <number_literal>
                      | <identifier>

<identifier> ::= <letter> { <letter> | <digit> | '_' }

<character> ::= <letter> | <digit> | <symbol> | <whitespace> | <special_character>

<letter> ::= a | b | ... | z | A | B | ... | Z

<digit> ::= 0 | 1 | ... | 9

<symbol> ::= + | - | * | / | = | < | > | & | ‘|’ | @ | # | $ | % | ^ | ! | ? | ~ | `

<whitespace> ::= ' ' | \t | \n | \r

<special_character> ::= '(' | ')' | '[' | ']' | '{' | '}' | '"' | "'" | ',' | ';' | ':' | '.' | '_' | '-' | '|' | '\\' | '/' | '<' | '>'